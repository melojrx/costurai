version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: costuraai_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    env_file:
      - .env.prod
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - costuraai_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: costuraai_redis
    volumes:
      - redis_data:/data
    networks:
      - costuraai_network
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Aplicação Django
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: costuraai:prod
    container_name: costuraai_web
    command: gunicorn confeccao_saas.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=confeccao_saas.settings.prod
      - RUN_MIGRATIONS=true
      - COLLECT_STATIC=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - costuraai_network
    restart: always

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: costuraai:prod
    container_name: costuraai_celery
    command: celery -A confeccao_saas worker -l info --concurrency=2
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=confeccao_saas.settings.prod
    depends_on:
      - db
      - redis
    networks:
      - costuraai_network
    restart: always

  # Celery Beat
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: costuraai:prod
    container_name: costuraai_beat
    command: celery -A confeccao_saas beat -l info
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=confeccao_saas.settings.prod
    depends_on:
      - db
      - redis
    networks:
      - costuraai_network
    restart: always

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: costuraai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - costuraai_network
    restart: always

  # Backup automático (opcional)
  backup:
    image: postgres:15-alpine
    container_name: costuraai_backup
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    env_file:
      - .env.prod
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - db
    networks:
      - costuraai_network
    restart: always

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  costuraai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 