# Makefile para CosturaAI SaaS

.PHONY: help dev prod build up down logs shell migrate static test clean backup restore

# Vari√°veis
COMPOSE_DEV = docker-compose.yml
COMPOSE_PROD = docker-compose.prod.yml
ENV_DEV = env.dev.example
ENV_PROD = env.prod.example

# Help
help:
	@echo "Comandos dispon√≠veis:"
	@echo "  make dev        - Iniciar ambiente de desenvolvimento"
	@echo "  make prod       - Iniciar ambiente de produ√ß√£o"
	@echo "  make build      - Construir imagens Docker"
	@echo "  make up         - Subir containers"
	@echo "  make down       - Parar containers"
	@echo "  make logs       - Ver logs dos containers"
	@echo "  make shell      - Abrir shell Django"
	@echo "  make migrate    - Executar migra√ß√µes"
	@echo "  make static     - Coletar arquivos est√°ticos"
	@echo "  make test       - Executar testes"
	@echo "  make clean      - Limpar arquivos tempor√°rios"
	@echo "  make backup     - Fazer backup do banco"
	@echo "  make restore    - Restaurar backup"

# Desenvolvimento
dev:
	@echo "üîß Iniciando ambiente de desenvolvimento..."
	@if [ ! -f .env.dev ]; then cp $(ENV_DEV) .env.dev; fi
	docker-compose -f $(COMPOSE_DEV) up

dev-build:
	@echo "üî® Construindo imagens de desenvolvimento..."
	docker-compose -f $(COMPOSE_DEV) build

dev-down:
	@echo "üõë Parando ambiente de desenvolvimento..."
	docker-compose -f $(COMPOSE_DEV) down

# Produ√ß√£o
prod:
	@echo "üöÄ Iniciando ambiente de produ√ß√£o..."
	@if [ ! -f .env.prod ]; then echo "‚ùå Arquivo .env.prod n√£o encontrado!"; exit 1; fi
	docker-compose -f $(COMPOSE_PROD) up -d

prod-build:
	@echo "üî® Construindo imagens de produ√ß√£o..."
	docker-compose -f $(COMPOSE_PROD) build

prod-down:
	@echo "üõë Parando ambiente de produ√ß√£o..."
	docker-compose -f $(COMPOSE_PROD) down

# Comandos gerais
logs:
	@echo "üìã Mostrando logs..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q)" ]; then \
		docker-compose -f $(COMPOSE_PROD) logs -f; \
	else \
		docker-compose -f $(COMPOSE_DEV) logs -f; \
	fi

shell:
	@echo "üêö Abrindo shell Django..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q web)" ]; then \
		docker-compose -f $(COMPOSE_PROD) exec web python manage.py shell; \
	else \
		docker-compose -f $(COMPOSE_DEV) exec web python manage.py shell; \
	fi

migrate:
	@echo "üîÑ Executando migra√ß√µes..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q web)" ]; then \
		docker-compose -f $(COMPOSE_PROD) exec web python manage.py migrate; \
	else \
		docker-compose -f $(COMPOSE_DEV) exec web python manage.py migrate; \
	fi

makemigrations:
	@echo "üìù Criando migra√ß√µes..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q web)" ]; then \
		docker-compose -f $(COMPOSE_PROD) exec web python manage.py makemigrations; \
	else \
		docker-compose -f $(COMPOSE_DEV) exec web python manage.py makemigrations; \
	fi

static:
	@echo "üì¶ Coletando arquivos est√°ticos..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q web)" ]; then \
		docker-compose -f $(COMPOSE_PROD) exec web python manage.py collectstatic --noinput; \
	else \
		docker-compose -f $(COMPOSE_DEV) exec web python manage.py collectstatic --noinput; \
	fi

test:
	@echo "üß™ Executando testes..."
	@if [ -f $(COMPOSE_PROD) ] && [ "$$(docker-compose -f $(COMPOSE_PROD) ps -q web)" ]; then \
		docker-compose -f $(COMPOSE_PROD) exec web python manage.py test; \
	else \
		docker-compose -f $(COMPOSE_DEV) exec web python manage.py test; \
	fi

# Backup e Restore
backup:
	@echo "üíæ Fazendo backup..."
	@if [ -x scripts/backup.sh ]; then \
		./scripts/backup.sh; \
	else \
		echo "‚ùå Script de backup n√£o encontrado!"; \
	fi

restore:
	@echo "‚ôªÔ∏è  Restaurando backup..."
	@if [ -x scripts/restore.sh ]; then \
		@if [ -z "$(BACKUP_FILE)" ]; then \
			echo "‚ùå Especifique o arquivo: make restore BACKUP_FILE=arquivo.sql.gz"; \
		else \
			./scripts/restore.sh $(BACKUP_FILE); \
		fi \
	else \
		echo "‚ùå Script de restore n√£o encontrado!"; \
	fi

# Limpeza
clean:
	@echo "üßπ Limpando arquivos tempor√°rios..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type f -name ".DS_Store" -delete
	rm -rf staticfiles/
	rm -rf .pytest_cache/
	rm -rf .coverage
	@echo "‚úÖ Limpeza conclu√≠da!"

# Deploy
deploy:
	@echo "üöÄ Executando deploy..."
	@if [ -x scripts/deploy.sh ]; then \
		./scripts/deploy.sh; \
	else \
		echo "‚ùå Script de deploy n√£o encontrado!"; \
	fi

# Comandos Docker
docker-clean:
	@echo "üê≥ Limpando Docker..."
	docker system prune -f
	docker volume prune -f
	@echo "‚úÖ Docker limpo!"

docker-stats:
	@echo "üìä Estat√≠sticas Docker..."
	docker stats

# Desenvolvimento r√°pido
runserver:
	python manage.py runserver

createsuperuser:
	python manage.py createsuperuser

# Instala√ß√£o local
install:
	pip install -r requirements.txt

install-dev:
	pip install -r requirements.txt
	pip install -r requirements-dev.txt 